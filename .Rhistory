}
train_1 <- fmcg_train(fmcg_msts)
test_1 <- fmcg_test(fmcg_msts)
#ets Holt - Winters
fmcg_ets <- stlm(train_1, method = "ets", lambda = 0) # no log transformation for addivite data
# SARIMA
fmcg_arima <- stlm(train_1, method = "arima", lambda = 0)
# forecast
fmcg_ets_f <- forecast(object = fmcg_ets, h = length(test_1))
fmcg_arima_f <- forecast(object = fmcg_arima, h = length(test_1))
#evaluation
eval_ets <- MAPE(as.vector(fmcg_ets_f$mean), test_1)
eval_arima <- MAPE(as.vector(fmcg_arima_f$mean), test_1)
data.frame(ETS = eval_ets, ARIMA = eval_arima)
fmcg_msts %>%
autoplot(series = "actual")+
autolayer(fmcg_ets_f$mean, series = "ETS")+
autolayer(fmcg_arima_f$mean, series = "ARIMA")
fmcg_train <- function(x){
train <- head(x, length(x) - 28,28*12)
}
fmcg_test <- function(x){
test <- tail(x,28,28*12)
}
train_1 <- fmcg_train(fmcg_msts)
test_1 <- fmcg_test(fmcg_msts)
#ets Holt - Winters
fmcg_ets <- stlm(train_1, method = "ets", lambda = 0) # no log transformation for addivite data
# SARIMA
fmcg_arima <- stlm(train_1, method = "arima", lambda = 0)
# forecast
fmcg_ets_f <- forecast(object = fmcg_ets, h = length(test_1))
fmcg_arima_f <- forecast(object = fmcg_arima, h = length(test_1))
#evaluation
eval_ets <- MAPE(as.vector(fmcg_ets_f$mean), test_1)
eval_arima <- MAPE(as.vector(fmcg_arima_f$mean), test_1)
data.frame(ETS = eval_ets, ARIMA = eval_arima)
fmcg_msts %>%
autoplot(series = "actual")+
autolayer(fmcg_ets_f$mean, series = "ETS")+
autolayer(fmcg_arima_f$mean, series = "ARIMA")
fmcg_arima_f
fmcg_ets_f
fmcg_ets
#making 3nd ts object
daily_fmcg$sales %>%
msts(seasonal.periods = c(28*3,28*12)) %>%  # multiseasonal ts (weekly,monthly,quarterly)
mstl() %>% #multiseasonal ts decomposotion
autoplot()
#assign final ts object
fmcg_msts <- daily_fmcg$sales %>%
msts(seasonal.periods = c(28*3, 28*12))
# check for stationary
adf.test(fmcg_msts)
fmcg_train <- function(x){
train <- head(x, length(x) - 28*3)
}
fmcg_test <- function(x){
test <- tail(x,28*3)
}
train_1 <- fmcg_train(fmcg_msts)
test_1 <- fmcg_test(fmcg_msts)
#ets Holt - Winters
fmcg_ets <- stlm(train_1, method = "ets", lambda = 0) # no log transformation for addivite data
# SARIMA
fmcg_arima <- stlm(train_1, method = "arima", lambda = 0)
# forecast
fmcg_ets_f <- forecast(object = fmcg_ets, h = length(test_1))
fmcg_arima_f <- forecast(object = fmcg_arima, h = length(test_1))
#evaluation
eval_ets <- MAPE(as.vector(fmcg_ets_f$mean), test_1)
eval_arima <- MAPE(as.vector(fmcg_arima_f$mean), test_1)
data.frame(ETS = eval_ets, ARIMA = eval_arima)
fmcg_msts %>%
autoplot(series = "actual")+
autolayer(fmcg_ets_f$mean, series = "ETS")+
autolayer(fmcg_arima_f$mean, series = "ARIMA")
fmcg_ts <- ts(data = daily_fmcg$sales,
start = range(daily_fmcg$date)[[1]],
frequency = 7) #weekly seasonality
fmcg_ts
fmcg_train <- function(x){
train <- head(x, length(x) - 28*3)
}
fmcg_test <- function(x){
test <- tail(x, 28*3)
}
train_1 <- fmcg_train(fmcg_msts)
test_1 <- fmcg_test(fmcg_msts)
#ets Holt - Winters
fmcg_ets <- stlm(train_1, method = "ets", lambda = 0) # no log transformation for addivite data
# SARIMA
fmcg_arima <- stlm(train_1, method = "arima", lambda = 0)
# forecast
fmcg_ets_f <- forecast(object = fmcg_ets, h = length(test_1))
fmcg_arima_f <- forecast(object = fmcg_arima, h = length(test_1))
#evaluation
eval_ets <- MAPE(as.vector(fmcg_ets_f$mean), test_1)
eval_arima <- MAPE(as.vector(fmcg_arima_f$mean), test_1)
data.frame(ETS = eval_ets, ARIMA = eval_arima)
range(fmcg)
range(fmcg$date)
library(ggplot2)
library(gridExtra)
a <- autoplot(fmcg_ets_f, series = "ETS", fcol = "red") +
autolayer(fmcg_msts, series = "Actual", color = "black") +
labs(subtitle = "FMCG SALES, from 2012 - 2014",
y = "Sales Frequency") +
theme_minimal()
b <- autoplot(fmcg_arima_f, series = "ARIMA", fcol = "blue") +
autolayer(fmcg_msts, series = "Actual", color = "black") +
labs(subtitle = "FMCG SALES, from 2012 - 2014",
y = "Sales Frequency") +
theme_minimal()
grid.arrange(a,b)
```{r}
fmcg_msts %>%
autoplot(series = "actual")+
autolayer(fmcg_ets_f$mean, series = "ETS")+
autolayer(fmcg_arima_f$mean, series = "ARIMA")
library(ggplot2)
library(gridExtra)
a <- autoplot(fmcg_ets_f, series = "ETS", fcol = "red") +
autolayer(fmcg_msts, series = "Actual", color = "black") +
labs(subtitle = "FMCG SALES, from 2012 - 2014",
y = "Sales Frequency") +
theme_minimal()
b <- autoplot(fmcg_arima_f, series = "ARIMA", fcol = "blue") +
autolayer(fmcg_msts, series = "Actual", color = "black") +
labs(subtitle = "FMCG SALES, from 2012 - 2014",
y = "Sales Frequency") +
theme_minimal()
grid.arrange(a,b)
library(ggplot2)
library(gridExtra)
a <- autoplot(fmcg_ets_f, series = "ETS", fcol = "red") +
autolayer(fmcg_msts, series = "Actual", color = "black") +
labs(subtitle = "FMCG SALES, from 2012 - 2014",
y = "Sales Frequency") +
theme_minimal()
b <- autoplot(fmcg_arima_f, series = "ARIMA", fcol = "blue") +
autolayer(fmcg_msts, series = "Actual", color = "black") +
labs(subtitle = "FMCG SALES, from 2012 - 2014",
y = "Sales Frequency") +
theme_minimal()
grid.arrange(a,b)
shapiro.test(fmcg_ets_f$residuals)
shapiro.test(fmcg_arima_f$residuals)
shapiro.test(fmcg_ets_f$residuals)
hist(fmcg_ets_f$residuals)
shapiro.test(fmcg_ets_f$residuals %>% sample(200))
shapiro.test(fmcg_ets_f$residuals)
hist(fmcg_ets_f$residuals, breaks = 100)
hist(fmcg_ets_f$residuals, breaks = 20
)
hist(fmcg_ets_f$residuals, breaks = 50)
hist(fmcg_ets_f$residuals, breaks = 30)
hist(fmcg_ets_f$residuals, breaks = 20)
hist(fmcg_ets_f$residuals, breaks = 35)
hist(fmcg_ets_f$residuals, breaks = 30)
train.new <- fmcg_msts
train.new
fmcg.new <- stlm(train.new, method = "ets", lambda = 0)
test.new <- read.csv("test_data.csv")
test.new
test <- test.new
filter(category_of_product == "fast_moving_consumer_goods") %>%
select(date,sales)
test <- test.new %>%
filter(category_of_product == "fast_moving_consumer_goods") %>%
select(date,sales)
test.new
test <- test.new %>%
filter(category_of_product == "fast_moving_consumer_goods") %>%
select(date,sales)
test.new
test.new <- read.csv("test_data.csv")
test.new
test <- test.new %>%
filter(category_of_product == "fast_moving_consumer_goods") %>%
select(date)
date()
test
test.new %>%
filter(category_of_product == "fast_moving_consumer_goods") %>%
select(date)
test.new %>%
filter(category_of_product == "fast_moving_consumer_goods") %>%
select(date)
test.new <- read.csv("test_data.csv")
test <- test.new %>%
filter(category_of_product == "fast_moving_consumer_goods") %>%
select(date)
train.new <- fmcg_msts
train.new
test.new <- read.csv("test_data.csv")
model_fmcg <- fmcg_msts
model_fmcg
test.new <- read.csv("test_data.csv")
test <- test.new %>%
filter(category_of_product == "fast_moving_consumer_goods") %>%
select(date)
test.new <- read.csv("test_data.csv")
test.new %>%
filter(category_of_product == "fast_moving_consumer_goods") %>%
select(date)
test.new <- read.csv("test_data.csv")
test.new
predict <- test.new %>% filter(category_of_product == "fast_moving_consumer_goods") %>%
select(date)
predict <- test.new %>% filter(category_of_product == "fast_moving_consumer_goods") %>%
select(date)
head(predict)
str(date)
str(predict)
predict <- test.new %>% filter(category_of_product == "fast_moving_consumer_goods") %>%
select(date) %>%
mutate(date = ymd(date))
head(predict)
str(predict)
predict <- test.new %>% filter(category_of_product == "fast_moving_consumer_goods")
mutate(date = ymd(date))
model_fmcg <- fmcg_msts
model_fmcg
test.new <- read.csv("test_data.csv")
predict <- test.new %>% filter(category_of_product == "fast_moving_consumer_goods")
mutate(date = ymd(date))
predict <- test.new %>% filter(category_of_product == "fast_moving_consumer_goods") %>%
mutate(date = ymd(date))
head(predict)
predict <- test.new %>% filter(category_of_product == "fast_moving_consumer_goods")
head(predict)
str(predict)
unique(predict$state)
unique(predict$outlet)
unique(predict$department_identifier)
predict %>%
mutate_if(as.character, is.factor)
predict %>%
select(-id) %>%
mutate_if(as.character, is.factor)
predict <- test.new %>% filter(category_of_product == "fast_moving_consumer_goods") %>%
select(-id) %>%
head(predict)
predict <- test.new %>% filter(category_of_product == "fast_moving_consumer_goods") %>%
select(-id) %>%
head(predict)
test.new <- read.csv("test_data.csv")
predict <- test.new %>% filter(category_of_product == "fast_moving_consumer_goods") %>%
select(-id) %>%
head(predict)
predict <- test.new %>% filter(category_of_product == "fast_moving_consumer_goods") %>%
select(-date) %>%
head(predict)
predict <- test.new %>% filter(category_of_product == "fast_moving_consumer_goods") %>%
head(predict)
test.new <- read.csv("test_data.csv")
predict <- test.new %>% filter(category_of_product == "fast_moving_consumer_goods") %>%
head(predict)
predict <- test.new %>% filter(category_of_product == "fast_moving_consumer_goods") %>%
select(-id) %>%
head(predict)
predict <- test.new %>% filter(category_of_product == "fast_moving_consumer_goods") %>%
head(predict)
test.new <- read.csv("test_data.csv")
predict <- test.new %>% filter(category_of_product == "fast_moving_consumer_goods") %>%
head(predict)
str(predict)
predict %>%
select(-id) %>%
mutate_if(as.character, is.factor)
test.new <- read.csv("test_data.csv")
predict <- test.new %>% filter(category_of_product == "fast_moving_consumer_goods") %>%
head(predict)
predict <- test.new %>% filter(category_of_product == "fast_moving_consumer_goods")
predict <- test.new %>% filter(category_of_product == "fast_moving_consumer_goods") %>%
select(-id)
predict <- test.new %>% filter(category_of_product == "fast_moving_consumer_goods") %>%
select(-id)
head(predict)
str(predict)
predict_clean <- predict %>%
mutate(date = ymd(date),
department_identifier = as.factor(department_identifier),
category_of_product = as.factor(category_of_product),
outlet = as.factor(outlet),
state = as.factor(state))
predict_clean <- predict %>%
mutate(date = ymd(date),
department_identifier = as.factor(department_identifier),
category_of_product = as.factor(category_of_product),
outlet = as.factor(outlet),
state = as.factor(state))
str(predict_clean)
predict
model_fmcg_ets <- stlm(model_fmcg, method = "ets", lambda = 0)
model_fmcg_ets
str(predict)
fmcg_forecast <- forecast(object = model_fmcg_ets, h = 8990)
fmcg_forecast
model_fmcg %>%
autoplot(series = "actual")+
autolayer(fmcg_forecast$mean, series = "ETS")
fmcg_forecast <- forecast(object = model_fmcg_ets, h = 800)
fmcg_forecast
model_fmcg %>%
autoplot(series = "actual")+
autolayer(fmcg_forecast$mean, series = "ETS")
fmcg_forecast <- forecast(object = model_fmcg_ets, h = 8990)
fmcg_forecast
model_fmcg[800,] %>%
autoplot(series = "actual")+
autolayer(fmcg_forecast$mean, series = "ETS")
model_fmcg[800,]
model_fmcg[1:800,] %>%
autoplot(series = "actual")+
autolayer(fmcg_forecast$mean, series = "ETS")
model_fmcg[1:800,]
model_fmcg[[1:800],]
model_fmcg%>%
autoplot(series = "actual")+
autolayer(fmcg_forecast$mean, series = "ETS")
model_fmcg%>%
autoplot(series = "actual")+
autolayer(fmcg_forecast[1:800,]$mean, series = "ETS")
fmcg_forecast <- forecast(object = model_fmcg_ets, h = 8990)
fmcg_forecast[1:800,]
fmcg_forecast[0:800,]
fmcg_forecast[1:800,]
fmcg_forecast[[1:800],]
fmcg_forecast[800,]
fmcg_forecast
fmcg_forecast <- forecast(object = model_fmcg_ets, h = 8990) %>% as.data.frame()
fmcg_forecast[800,]
fmcg_forecast[1:800,]
model_fmcg%>%
autoplot(series = "actual")+
autolayer(fmcg_forecast[1:800,]$mean, series = "ETS")
model_fmcg%>%
autoplot(series = "actual")+
autolayer(fmcg_forecast$mean, series = "ETS")
fmcg_forecast <- forecast(object = model_fmcg_ets, h = 8990)
fmcg_forecast[1:800,]
fmcg_forecast <- forecast(object = model_fmcg_ets, h = 8990)
model_fmcg%>%
autoplot(series = "actual")+
autolayer(fmcg_forecast$mean, series = "ETS")
predict_clean <- predict %>%
mutate(date = ymd(date),
department_identifier = as.factor(department_identifier),
category_of_product = as.factor(category_of_product),
outlet = as.factor(outlet),
state = as.factor(state))
range(predict_clean$date)
predict_clean <- predict %>%
mutate(date = ymd(date),
department_identifier = as.factor(department_identifier),
category_of_product = as.factor(category_of_product),
outlet = as.factor(outlet),
state = as.factor(state))
summary(predict_clean)
predict <- test.new %>% filter(category_of_product == "fast_moving_consumer_goods") %>%
select(-id)
str(predict)
predict_clean <- predict %>%
mutate(date = ymd(date),
department_identifier = as.factor(department_identifier),
category_of_product = as.factor(category_of_product),
outlet = as.factor(outlet),
state = as.factor(state) %>%
arrange(date))
predict_clean <- predict %>%
mutate(date = ymd(date),
department_identifier = as.factor(department_identifier),
category_of_product = as.factor(category_of_product),
outlet = as.factor(outlet),
state = as.factor(state) %>%
arrange())
predict_clean <- predict %>%
mutate(date = ymd(date),
department_identifier = as.factor(department_identifier),
category_of_product = as.factor(category_of_product),
outlet = as.factor(outlet),
state = as.factor(state) %>%
predict_clean <- predict %>%
mutate(date = ymd(date),
department_identifier = as.factor(department_identifier),
category_of_product = as.factor(category_of_product),
outlet = as.factor(outlet),
state = as.factor(state))
predict_clean <- predict %>%
mutate(date = ymd(date),
department_identifier = as.factor(department_identifier),
category_of_product = as.factor(category_of_product),
outlet = as.factor(outlet),
state = as.factor(state) %>%
arrange())
predict_clean <- predict %>%
mutate(date = ymd(date),
department_identifier = as.factor(department_identifier),
category_of_product = as.factor(category_of_product),
outlet = as.factor(outlet),
state = as.factor(state))
predict_clean
range(predict_clean$date)
predict_clean <- predict_clean %>%
group_by(date) %>%
summarise(sales = sum(sales)) %>%
arrange(date)
predict_clean %>%
group_by(date)
predict_clean <- predict_clean %>%
group_by(date)
predict_clean
predict_clean <- predict_clean %>%
group_by(date) %>%
unique()
predict_clean
predict_clean <- predict_clean %>%
group_by(date) %>%
unique()
predict_clean
predict_clean[duplicated(predict_clean),]
predict_clean
predict_clean[!duplicated(predict_clean),]
predict_clean
predict_clean$date[!duplicated(predict_clean$date),]
predict_clean$date[!duplicated(predict_clean$date)]
predict_clean$date[!duplicated(predict_clean$date)] %>% as.data.frame()
predict_clean$Date <- predict_clean$date[!duplicated(predict_clean$date)]
predict_clean <- predict_clean$date[!duplicated(predict_clean$date)]
predict_clean
predict_clean %>% as.data.frame()
predict_clean %>% as.data.frame() %>% mutate(. = date)
predict_clean$date %>% as.data.frame()
predict_clean %>% as.data.frame()
predict_clean$new <- predict_clean$date[!duplicated(predict_clean$date)]
predict_clean <- predict_clean$date[!duplicated(predict_clean$date)]
predict_clean <- predict_clean$date[!duplicated(predict_clean$date)]
predict_clean <- predict %>%
mutate(date = ymd(date),
department_identifier = as.factor(department_identifier),
category_of_product = as.factor(category_of_product),
outlet = as.factor(outlet),
state = as.factor(state))
predict_clean <- predict_clean$date[!duplicated(predict_clean$date)]
predict_clean %>% as.data.frame()
predict_clean %>% as.data.frame() %>% colnames(date)
predict_clean <- predict_clean$date[!duplicated(predict_clean$date)] %>% as.data.frame()
predict_clean <- predict_clean$date[!duplicated(predict_clean$date)]
predict_clean <- predict %>%
mutate(date = ymd(date),
department_identifier = as.factor(department_identifier),
category_of_product = as.factor(category_of_product),
outlet = as.factor(outlet),
state = as.factor(state))
predict_clean <- predict_clean$date[!duplicated(predict_clean$date)]
predict_clean <- predict_clean$date[!duplicated(predict_clean$date)] %>% as.data.frame()
predict_clean <- predict %>%
mutate(date = ymd(date),
department_identifier = as.factor(department_identifier),
category_of_product = as.factor(category_of_product),
outlet = as.factor(outlet),
state = as.factor(state))
predict_clean <- predict_clean$date[!duplicated(predict_clean$date)]
plan <- predict_clean %>% as.data.frame()
head(plan)
plan <- predict_clean %>% as.data.frame()
head(plan)
plan$.[plan$. == "y"] <- date
plan$.[plan$. == "y"] <- "date"
plan$.[plan$. == "y"] <- "ds"
predict_clean <- predict_clean$date[!duplicated(predict_clean$date)]
predict_clean <- predict %>%
mutate(date = ymd(date),
department_identifier = as.factor(department_identifier),
category_of_product = as.factor(category_of_product),
outlet = as.factor(outlet),
state = as.factor(state))
predict_clean <- predict_clean$date[!duplicated(predict_clean$date)]
predict_clean <- predict_clean %>% as.data.frame()
predict_clean
model_fmcg%>%
autoplot(series = "actual")+
autolayer(fmcg_forecast$mean, series = "ETS")
fmcg_forecast <- forecast(object = model_fmcg_ets, h = 31)
model_fmcg%>%
autoplot(series = "actual")+
autolayer(fmcg_forecast$mean, series = "ETS")
predict_clean
predict_clean$forecast <- fmcg_forecast
fmcg_forecast
predict_clean %>%
cbind(fmcg_forecast)
predict_clean %>%
cbind(fmcg_forecast) %>%
mutate(. = date)
predict_clean %>%
cbind(fmcg_forecast) %>%
rename(. = date)
predict_clean %>%
cbind(fmcg_forecast)
predict_clean %>%
cbind(fmcg_forecast) %>%
select(.)
predict_clean %>%
cbind(fmcg_forecast) %>%
select(.)
predict_clean %>%
cbind(fmcg_forecast) %>%
predict_clean %>%
cbind(fmcg_forecast)
