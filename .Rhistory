forecast_list <- list(
"ETS" = forecast_ets,
"Arima" = forecast_arima
)
compare_forecast(forecast_list,test_1 )
fmcg_msts %>%
autoplot(series = "Actual") +
autolayer(forecast_ets$mean, series = "ETS") +
autolayer(forecast_arima$mean, series = "ARIMA")
fmcg_train <- function(x){
train <- head(x, length(x) - 31)
}
fmcg_test <- function(x){
test <- tail(x, 31)
}
train_1 <- fmcg_train(fmcg_msts)
test_1 <- fmcg_test(fmcg_msts)
#ets Holt - Winters
fmcg_ets <- stlm(train_1, method = "ets", lambda = 0) # no log transformation for addivite data
# SARIMA
fmcg_arima <- stlm(train_1, method = "arima", lambda = 0)
#Forecast
forecast_ets <- forecast(object = fmcg_ets, h = length(test_1))
forecast_arima <- forecast(object = fmcg_arima, h = length(test_1))
#Evaluation
forecast_list <- list(
"ETS" = forecast_ets,
"Arima" = forecast_arima
)
compare_forecast(forecast_list,test_1 )
fmcg_msts %>%
autoplot(series = "Actual") +
autolayer(forecast_ets$mean, series = "ETS") +
autolayer(forecast_arima$mean, series = "ARIMA")
shapiro.test(forecast_arima$residuals)
hist(forecast_arima$residuals, breaks = 20)
shapiro.test(forecast_ets$residuals)
shapiro.test(forecast_arima$residuals)
fmcg_train <- function(x){
train <- head(x, length(x) - 28)
}
fmcg_test <- function(x){
test <- tail(x, 28)
}
train_1 <- fmcg_train(fmcg_msts)
test_1 <- fmcg_test(fmcg_msts)
#ets Holt - Winters
fmcg_ets <- stlm(train_1, method = "ets", lambda = 0) # no log transformation for addivite data
# SARIMA
fmcg_arima <- stlm(train_1, method = "arima", lambda = 0)
compare_forecast <- function(x, test){
lapply(x, function(x) forecast::accuracy(x, test)["Test set", ]) %>%
lapply(., function(x) x %>% t() %>% as.data.frame) %>%
bind_rows() %>%
mutate(model = names(x)) %>%
select(model, everything())
}
#Forecast
forecast_ets <- forecast(object = fmcg_ets, h = length(test_1))
forecast_arima <- forecast(object = fmcg_arima, h = length(test_1))
#Evaluation
forecast_list <- list(
"ETS" = forecast_ets,
"Arima" = forecast_arima
)
compare_forecast(forecast_list,test_1 )
fmcg_msts %>%
autoplot(series = "Actual") +
autolayer(forecast_ets$mean, series = "ETS") +
autolayer(forecast_arima$mean, series = "ARIMA")
shapiro.test(forecast_arima$residuals)
hist(forecast_arima$residuals, breaks = 20)
hist(forecast_arima$residuals, breaks = 50)
fmcg_train <- function(x){
train <- head(x, length(x) - 28*12)
}
fmcg_test <- function(x){
test <- tail(x, 28*12)
}
train_1 <- fmcg_train(fmcg_msts)
test_1 <- fmcg_test(fmcg_msts)
#ets Holt - Winters
fmcg_ets <- stlm(train_1, method = "ets", lambda = 0) # no log transformation for addivite data
fmcg_train <- function(x){
train <- head(x, length(x) - 28*3)
}
fmcg_test <- function(x){
test <- tail(x, 28*3)
}
train_1 <- fmcg_train(fmcg_msts)
test_1 <- fmcg_test(fmcg_msts)
#ets Holt - Winters
fmcg_ets <- stlm(train_1, method = "ets", lambda = 0) # no log transformation for addivite data
# SARIMA
fmcg_arima <- stlm(train_1, method = "arima", lambda = 0)
compare_forecast <- function(x, test){
lapply(x, function(x) forecast::accuracy(x, test)["Test set", ]) %>%
lapply(., function(x) x %>% t() %>% as.data.frame) %>%
bind_rows() %>%
mutate(model = names(x)) %>%
select(model, everything())
}
#Forecast
forecast_ets <- forecast(object = fmcg_ets, h = length(test_1))
forecast_arima <- forecast(object = fmcg_arima, h = length(test_1))
#Evaluation
forecast_list <- list(
"ETS" = forecast_ets,
"Arima" = forecast_arima
)
compare_forecast(forecast_list,test_1 )
fmcg_msts %>%
autoplot(series = "Actual") +
autolayer(forecast_ets$mean, series = "ETS") +
autolayer(forecast_arima$mean, series = "ARIMA")
shapiro.test(forecast_arima$residuals)
hist(forecast_arima$residuals, breaks = 50)
fmcg_train <- function(x){
train <- head(x, length(x) - 28*6)
}
fmcg_test <- function(x){
test <- tail(x, 28*6)
}
train_1 <- fmcg_train(fmcg_msts)
test_1 <- fmcg_test(fmcg_msts)
#ets Holt - Winters
fmcg_ets <- stlm(train_1, method = "ets", lambda = 0) # no log transformation for addivite data
fmcg_train <- function(x){
train <- head(x, length(x) - 365)
}
fmcg_test <- function(x){
test <- tail(x, 365)
}
train_1 <- fmcg_train(fmcg_msts)
test_1 <- fmcg_test(fmcg_msts)
#ets Holt - Winters
fmcg_ets <- stlm(train_1, method = "ets", lambda = 0) # no log transformation for addivite data
fmcg_train <- function(x){
train <- head(x, length(x) - 7)
}
fmcg_test <- function(x){
test <- tail(x, 7)
}
train_1 <- fmcg_train(fmcg_msts)
test_1 <- fmcg_test(fmcg_msts)
#ets Holt - Winters
fmcg_ets <- stlm(train_1, method = "ets", lambda = 0) # no log transformation for addivite data
# SARIMA
fmcg_arima <- stlm(train_1, method = "arima", lambda = 0)
compare_forecast <- function(x, test){
lapply(x, function(x) forecast::accuracy(x, test)["Test set", ]) %>%
lapply(., function(x) x %>% t() %>% as.data.frame) %>%
bind_rows() %>%
mutate(model = names(x)) %>%
select(model, everything())
}
#Forecast
forecast_ets <- forecast(object = fmcg_ets, h = length(test_1))
forecast_arima <- forecast(object = fmcg_arima, h = length(test_1))
#Evaluation
forecast_list <- list(
"ETS" = forecast_ets,
"Arima" = forecast_arima
)
compare_forecast(forecast_list,test_1 )
fmcg_msts %>%
autoplot(series = "Actual") +
autolayer(forecast_ets$mean, series = "ETS") +
autolayer(forecast_arima$mean, series = "ARIMA")
shapiro.test(forecast_arima$residuals)
hist(forecast_arima$residuals, breaks = 50)
fmcg_train <- function(x){
train <- head(x, length(x) - 7*4)
}
fmcg_test <- function(x){
test <- tail(x, 7*4)
}
train_1 <- fmcg_train(fmcg_msts)
test_1 <- fmcg_test(fmcg_msts)
#ets Holt - Winters
fmcg_ets <- stlm(train_1, method = "ets", lambda = 0) # no log transformation for addivite data
# SARIMA
fmcg_arima <- stlm(train_1, method = "arima", lambda = 0)
#Forecast
forecast_ets <- forecast(object = fmcg_ets, h = length(test_1))
forecast_arima <- forecast(object = fmcg_arima, h = length(test_1))
#Evaluation
forecast_list <- list(
"ETS" = forecast_ets,
"Arima" = forecast_arima
)
compare_forecast(forecast_list,test_1 )
shapiro.test(forecast_arima$residuals)
hist(forecast_arima$residuals, breaks = 50)
test_forecast(actual = fmcg_msts,
forecast.obj = forecast_arima,
train = train_1,
test = test_1)
TSstudio::test_forecast(actual = fmcg_msts,
forecast.obj = forecast_arima,
train = train_1,
test = test_1)
model_fmcg <- fmcg_msts
predict <- read.csv("test_data.csv")
predict <- read.csv("test_data.csv")
head(predict)
predict %>%
filter(category_of_product == "fast_moving_consumer_goods") %>%
select(-id)
predict <- predict %>%
filter(category_of_product == "fast_moving_consumer_goods") %>%
select(-id)
predict <- predict %>%
filter(category_of_product == "fast_moving_consumer_goods") %>%
select(-id) %>%
mutate(date = ymd(date))
predict <- predict %>%
filter(category_of_product == "fast_moving_consumer_goods") %>%
select(-id)
predict <- read.csv("test_data.csv")
head(predict)
predict <- predict %>%
filter(category_of_product == "fast_moving_consumer_goods") %>%
select(-id)
predict
predict %>% mutate(date = ymd(date))
predict_clean <- predict %>% mutate(date = ymd(date))
predict_clean[!duplicated(predict_clean$date),]
predict_forecast <- predict_clean[!duplicated(predict_clean$date),]
predict_forecast <- predict_clean[!duplicated(predict_clean$date),]
predict_forecast
predict_forecast <- predict_clean[!duplicated(predict_clean$date),] %>%
select(date)
predict_forecast
predict_forecast <- predict_clean[!duplicated(predict_clean$date),] %>%
select(date)
data.frame(predict_forecast)
predict_forecast <- predict_clean[!duplicated(predict_clean$date),] %>%
select(date)
data.frame(predict_forecast)
predict_forecast <- predict_clean[!duplicated(predict_clean$date),] %>%
select(date)
predict_forecast
predict_forecast <- predict_clean[!duplicated(predict_clean$date),] %>%
select(date)
predict_forecast[,-1]
predict_forecast <- predict_clean[!duplicated(predict_clean$date),] %>%
select(date)
predict_forecast[,-0]
predict_forecast
arima_model <- stlm(model_fmcg, method = "arima", lambda = 0)
arima_model <- stlm(model_fmcg, method = "arima", lambda = 0)
#forecast
arima_f <- forecast(arima_model, h = 31)
TSstudio::test_forecast(actual = model_fmcg,
forecast.obj = arima_f,
test = predict_forecast)
TSstudio::test_forecast(actual = model_fmcg,
forecast.obj = arima_f,
train = model_fmcg
test = predict_forecast)
model_fmcg %>%
autoplot(series = "Actual") +
autolayer(arima_f$mean, series = "Forecast")
predict_forecast %>%
cbind(arima_f)
predict_forecast %>%
cbind(arima_f) %>% as.data.frame()
# clear-up the environment
rm(list = ls())
# chunk options
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>"
)
options(scipen = 999)
library(dplyr) # for data wrangling
library(lubridate) # to dea with date
library(padr) # for padding
library(forecast) # time series library
library(tseries) # for adf.test
library(MLmetrics) # calculate error
library(zoo) #imputation missing value
library(tseries) # adf.test
fmcg <- read.csv("data.csv")
glimpse(fmcg)
fmcg <- fmcg %>%
mutate(category_of_product = as.factor(category_of_product),
state = as.factor(state),
date = ymd(date))
glimpse(fmcg)
head(fmcg)
fmcg_data <- fmcg %>%
filter(category_of_product == "fast_moving_consumer_goods") %>%
select(date,sales)
fmcg_data
daily_fmcg <- fmcg_data %>%
group_by(date) %>%
summarise(sales = sum(sales)) %>%
arrange(date)
daily_fmcg
daily_fmcg %>% filter(sales == 0)
daily_fmcg <- daily_fmcg[daily_fmcg$sales > 0, ]
daily_fmcg %>% filter(sales == 0 )
daily_fmcg %>%
arrange(date) %>%
pad() %>%
na.locf()
range(daily_fmcg$date)
fmcg_ts <- ts(data = daily_fmcg$sales,
start = range(daily_fmcg$date)[[1]],
frequency = 7) #weekly seasonality
fmcg_decom <- decompose(fmcg_ts)
autoplot(fmcg_decom)
#making 2nd ts object
daily_fmcg$sales %>%
msts(seasonal.periods = c(7,7*4)) %>%  # multiseasonal ts (weekly, monthly)
mstl() %>% #multiseasonal ts decomposotion
autoplot()
#making 3nd ts object
daily_fmcg$sales %>%
msts(seasonal.periods = c(7*4*3, 7*4*12)) %>%  # multiseasonal ts (quarterly, yearly)
mstl() %>% #multiseasonal ts decomposotion
autoplot()
#assign final ts object
fmcg_msts <- daily_fmcg$sales %>%
msts(seasonal.periods = c(7*4*3, 7*4*12))
# check for stationary
adf.test(fmcg_msts)
fmcg_train <- function(x){
train <- head(x, length(x) - 7*4)
}
fmcg_test <- function(x){
test <- tail(x, 7*4)
}
train_1 <- fmcg_train(fmcg_msts)
test_1 <- fmcg_test(fmcg_msts)
#ets Holt - Winters
fmcg_ets <- stlm(train_1, method = "ets", lambda = 0) # no log transformation for addivite data
# SARIMA
fmcg_arima <- stlm(train_1, method = "arima", lambda = 0)
compare_forecast <- function(x, test){
lapply(x, function(x) forecast::accuracy(x, test)["Test set", ]) %>%
lapply(., function(x) x %>% t() %>% as.data.frame) %>%
bind_rows() %>%
mutate(model = names(x)) %>%
select(model, everything())
}
#Forecast
forecast_ets <- forecast(object = fmcg_ets, h = length(test_1))
forecast_arima <- forecast(object = fmcg_arima, h = length(test_1))
#Evaluation
forecast_list <- list(
"ETS" = forecast_ets,
"Arima" = forecast_arima
)
compare_forecast(forecast_list,test_1 )
fmcg_msts %>%
autoplot(series = "Actual") +
autolayer(forecast_ets$mean, series = "ETS") +
autolayer(forecast_arima$mean, series = "ARIMA")
shapiro.test(forecast_arima$residuals)
hist(forecast_arima$residuals, breaks = 50)
TSstudio::test_forecast(actual = fmcg_msts,
forecast.obj = forecast_arima,
train = train_1,
test = test_1)
model_fmcg <- fmcg_msts
predict <- read.csv("test_data.csv")
head(predict)
predict <- predict %>%
filter(category_of_product == "fast_moving_consumer_goods") %>%
select(-id)
predict_clean <- predict %>% mutate(date = ymd(date))
predict_forecast <- predict_clean[!duplicated(predict_clean$date),] %>%
select(date)
predict_forecast
arima_model <- stlm(model_fmcg, method = "arima", lambda = 0)
#forecast
arima_f <- forecast(arima_model, h = 31)
model_fmcg %>%
autoplot(series = "Actual") +
autolayer(arima_f$mean, series = "Forecast")
#ets Holt - Winters
fmcg_ets <- stlm(train_1, method = "ets", lambda = 0) # no log transformation for addivite data
# SARIMA
fmcg_arima <- stlm(train_1, method = "arima", lambda = 0)
# clear-up the environment
rm(list = ls())
# chunk options
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>"
)
options(scipen = 999)
library(dplyr) # for data wrangling
library(lubridate) # to dea with date
library(padr) # for padding
library(forecast) # time series library
library(tseries) # for adf.test
library(MLmetrics) # calculate error
library(zoo) #imputation missing value
library(tseries) # adf.test
fmcg <- read.csv("data.csv")
glimpse(fmcg)
fmcg <- fmcg %>%
mutate(category_of_product = as.factor(category_of_product),
state = as.factor(state),
date = ymd(date))
glimpse(fmcg)
head(fmcg)
fmcg_data <- fmcg %>%
filter(category_of_product == "fast_moving_consumer_goods") %>%
select(date,sales)
fmcg_data
daily_fmcg <- fmcg_data %>%
group_by(date) %>%
summarise(sales = sum(sales)) %>%
arrange(date)
daily_fmcg
daily_fmcg %>% filter(sales == 0)
daily_fmcg <- daily_fmcg[daily_fmcg$sales > 0, ]
daily_fmcg %>% filter(sales == 0 )
daily_fmcg %>%
arrange(date) %>%
pad() %>%
na.locf()
range(daily_fmcg$date)
fmcg_ts <- ts(data = daily_fmcg$sales,
start = range(daily_fmcg$date)[[1]],
frequency = 7) #weekly seasonality
fmcg_decom <- decompose(fmcg_ts)
autoplot(fmcg_decom)
#making 2nd ts object
daily_fmcg$sales %>%
msts(seasonal.periods = c(7,7*4)) %>%  # multiseasonal ts (weekly, monthly)
mstl() %>% #multiseasonal ts decomposotion
autoplot()
#making 3nd ts object
daily_fmcg$sales %>%
msts(seasonal.periods = c(7*4*3, 7*4*12)) %>%  # multiseasonal ts (quarterly, yearly)
mstl() %>% #multiseasonal ts decomposotion
autoplot()
#assign final ts object
fmcg_msts <- daily_fmcg$sales %>%
msts(seasonal.periods = c(7*4*3, 7*4*12))
# check for stationary
adf.test(fmcg_msts)
fmcg_train <- function(x){
train <- head(x, length(x) - 7*4)
}
fmcg_test <- function(x){
test <- tail(x, 7*4)
}
train_1 <- fmcg_train(fmcg_msts)
test_1 <- fmcg_test(fmcg_msts)
#ets Holt - Winters
fmcg_ets <- stlm(train_1, method = "ets", lambda = 0) # no log transformation for addivite data
# SARIMA
fmcg_arima <- stlm(train_1, method = "arima", lambda = 0)
compare_forecast <- function(x, test){
lapply(x, function(x) forecast::accuracy(x, test)["Test set", ]) %>%
lapply(., function(x) x %>% t() %>% as.data.frame) %>%
bind_rows() %>%
mutate(model = names(x)) %>%
select(model, everything())
}
#Forecast
forecast_ets <- forecast(object = fmcg_ets, h = length(test_1))
forecast_arima <- forecast(object = fmcg_arima, h = length(test_1))
#Evaluation
forecast_list <- list(
"ETS" = forecast_ets,
"Arima" = forecast_arima
)
compare_forecast(forecast_list,test_1 )
fmcg_msts %>%
autoplot(series = "Actual") +
autolayer(forecast_ets$mean, series = "ETS") +
autolayer(forecast_arima$mean, series = "ARIMA")
shapiro.test(forecast_arima$residuals)
hist(forecast_arima$residuals, breaks = 50)
TSstudio::test_forecast(actual = fmcg_msts,
forecast.obj = forecast_arima,
train = train_1,
test = test_1)
model_fmcg <- fmcg_msts
predict <- read.csv("test_data.csv")
head(predict)
predict <- predict %>%
filter(category_of_product == "fast_moving_consumer_goods") %>%
select(-id)
predict_clean <- predict %>% mutate(date = ymd(date))
predict_forecast <- predict_clean[!duplicated(predict_clean$date),] %>%
select(date)
predict_forecast
arima_model <- stlm(model_fmcg, method = "arima", lambda = 0)
#forecast
arima_f <- forecast(arima_model, h = 31)
model_fmcg %>%
autoplot(series = "Actual") +
autolayer(arima_f$mean, series = "Forecast")
#Evaluation
forecast_list <- list(
"ETS" = forecast_ets,
"Arima" = forecast_arima
)
compare_forecast(forecast_list,test_1 )
